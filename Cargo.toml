[package]
publish = false

name = "nexus-install-library"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[build-dependencies]
cc = "*"

[dependencies]
hyper-tls = "*"
hyper = { version = "0.14", features = ["full"] }
tokio = { version = "1", features = ["full"] }

# --> Workspaces - Overview
# A workspace is a collection of one or more packages that share common dependency resolution
# (with a shared Cargo.lock), output directory, and various settings such as profiles. Packages
# that are part of a workspaces are called workspace members. There are two flavours of
# workspaces: as root package or as virtual manifest.
#
# --> Package Selection
#
# In a workspace, package-related cargo commands like cargo build can use the -p / --package or --workspace
# command-line flags to determine which packages to operate on. If neither of those flags are specified,
# Cargo will use the package in the current working directory. If the current directory is a virtual workspace,
# it will apply to all members (as if --workspace were specified on the command-line).
#
# The optional default-members key can be specified to set the members to operate on when in the workspace
# root and the package selection flags are not used:
#
# ```ini
# [workspace]
# members = ["path/to/member1", "path/to/member2", "path/to/member3/*"]
# default-members = ["path/to/member2", "path/to/member3/foo"]
# ```
#
# When specified, default-members must expand to a subset of members.
#
# The `exclude` key can be used to prevent paths from being included in a workspace. This can be useful if some path
# dependencies aren't desired to be in the workspace at all, or using a glob pattern and you want to remove a
# directory.
#
# The `workspace.metadata` Table
#
# The `workspace.metadata` table is ignored by Cargo and will not be warned about; for tools that would like to
# store workspace configuration in `Cargo.toml`:
#
# ```ini
# [workspace]
# members = ["member1", "member2"]
#
# [workspace.metadata.webcontents]
# root = "path/to/webproject"
# tool = ["npm", "run", "build"]
# ```
#

[workspace]

# --> Badges - Overview
# The `maintenance` table indicates the status of the maintenance of
# the crate. This may be used by a registry, but is currently not
# used by crates.io. See https://github.com/rust-lang/crates.io/issues/2437
# and https://github.com/rust-lang/crates.io/issues/2438 for more details.
#
# The `status` field is required. Available options are:
# - `actively-developed`: New features are being added and bugs are being fixed.
# - `passively-maintained`: There are no plans for new features, but the maintainer intends to
#   respond to issues that get filed.
# - `as-is`: The crate is feature complete, the maintainer does not intend to continue working on
#   it or providing support, but it works for the purposes it was designed for.
# - `experimental`: The author wants to share it with the community but is not intending to meet
#   anyone's particular use case.
# - `looking-for-maintainer`: The current maintainer would like to transfer the crate to someone
#   else.
# - `deprecated`: The maintainer does not recommend using this crate (the description of the crate
#   can describe why, there could be a better solution available or there could be problems with
#   the crate that the author does not want to fix).
# - `none`: Displays no badge on crates.io, since the maintainer has not chosen to specify
#   their intentions, potential crate users will need to investigate on their own.

[badges]
maintenance = { status = "actively-developed" }
